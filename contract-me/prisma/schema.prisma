// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  CONTRACTOR
}

enum IssueStatus {
  SUBMITTED
  ANALYZING
  PENDING_CONTRACTOR
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum IssuePriority {
  EMERGENCY
  URGENT
  NORMAL
  LOW
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  phoneNumber String?
  password    String
  role        Role     @default(USER)
  
  // Address Information
  street      String?
  city        String?
  state       String?
  zipCode     String?
  latitude    Float?
  longitude   Float?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  issues                  Issue[]
  claimedEnrichedIssues   EnrichedIssue[]
  callRequests            CallRequest[]
  availability            ContractorAvailability[]
  contractorAppointments  Appointment[] @relation("ContractorAppointments")
  customerAppointments    Appointment[] @relation("CustomerAppointments")
  contractorProfile       ContractorProfile?

  @@map("users")
}

enum CallRequestStatus {
  INITIATED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

model CallRequest {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  phoneNumber       String
  customerName      String?
  preferredTime     String?
  vapiCallId        String?           @unique
  status            CallRequestStatus @default(INITIATED)
  extractedData     Json?
  resultingIssueId  String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("call_requests")
}

model Issue {
  id          String        @id @default(cuid())
  title       String?
  description String
  status      IssueStatus   @default(SUBMITTED)
  priority    IssuePriority @default(NORMAL)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  attachments String[]
  
  // Job Location (can override user's address)
  jobStreet   String?
  jobCity     String?
  jobState    String?
  jobZipCode  String?
  jobLatitude Float?
  jobLongitude Float?
  
  enriched    EnrichedIssue?
  appointments Appointment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("issues")
}

model EnrichedIssue {
  id                        String   @id @default(cuid())
  issueId                   String   @unique
  issue                     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  
  // OpenAI Analysis Results
  identifiedProblem         String
  repairSolution            String
  estimatedTimeHours        Float?
  difficultyLevel           String   // "Easy", "Medium", "Hard", "Expert"
  
  // Items and Costs
  requiredItems             Json     // Array of {name: string, estimatedCost: number, quantity?: number, unit?: string}
  totalEstimatedCost        Float?
  laborCost                 Float?
  materialsCost             Float?
  totalQuotedPrice          Float?    // Final price contractor will charge
  
  // Additional Information
  questionsForUser          String[] // Things to ask the customer for clarification
  contractorChecklist       String[] // Things contractor should verify on-site
  
  // Contractor Assignment
  claimedByContractorId     String?
  claimedAt                 DateTime?
  contractorUser            User?    @relation(fields: [claimedByContractorId], references: [id])
  
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("enriched_issues")
}

model ContractorAvailability {
  id           String    @id @default(cuid())
  contractorId String
  contractor   User      @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  dayOfWeek    DayOfWeek
  startTime    String    // "09:00" format
  endTime      String    // "17:00" format
  isAvailable  Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([contractorId, dayOfWeek, startTime])
  @@map("contractor_availability")
}

model Appointment {
  id                String            @id @default(cuid())
  issueId           String
  issue             Issue             @relation(fields: [issueId], references: [id])
  contractorId      String
  contractor        User              @relation("ContractorAppointments", fields: [contractorId], references: [id])
  customerId        String
  customer          User              @relation("CustomerAppointments", fields: [customerId], references: [id])
  
  scheduledDate     DateTime
  estimatedDuration Int               // minutes
  status            AppointmentStatus @default(SCHEDULED)
  
  // Cost Information
  quotedPrice       Float?
  finalPrice        Float?
  
  // Notes
  contractorNotes   String?
  customerNotes     String?
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("appointments")
}

model ContractorProfile {
  id                    String   @id @default(cuid())
  contractorId          String   @unique
  contractor            User     @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  
  // Skills and Specialties
  skills                String[] // ["plumbing", "electrical", "carpentry", "hvac", etc.]
  specialties           String[] // ["bathroom remodeling", "kitchen renovation", etc.]
  experienceYears       Int?
  
  // Certifications and Licenses
  licenses              String[] // ["electrician license", "plumbing license", etc.]
  certifications        String[] // ["HVAC certified", "EPA certified", etc.]
  insuranceVerified     Boolean  @default(false)
  bondedAndInsured      Boolean  @default(false)
  
  // Service Areas
  serviceRadius         Int?     // miles from their location
  serviceZipCodes       String[] // specific zip codes they serve
  
  // Business Info
  businessName          String?
  yearsInBusiness       Int?
  employeeCount         Int?     // 1 for solo, more for company
  
  // Ratings and Reviews
  averageRating         Float?
  totalJobs             Int      @default(0)
  completedJobs         Int      @default(0)
  
  // Preferences
  preferredJobTypes     String[] // job difficulty levels they prefer
  minimumJobValue       Float?   // minimum job value they'll accept
  maximumJobsPerDay     Int?     // workload management
  
  // Contact preferences for auto-assignment
  acceptAutoAssignment  Boolean  @default(false)
  autoCallEnabled       Boolean  @default(false)
  preferredContactTime  String?  // "morning", "afternoon", "evening"
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("contractor_profiles")
}
